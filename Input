package prj5;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

/**
 * Input class that reads files
 * 
 * @author Nathan Mussie <k1ngz>
 * @author Conor Dewey <cdewey96>
 * @author Cort Fisher <cortef1>
 * @version 2015.11.30
 *
 */
public class Input {

    private static SongList songs;
    private static LList<Person> people;
    
    public static int [] hobbyArray = {0, 0, 0, 0};
    public static int [] majorArray = {0, 0, 0, 0};
    public static int [] regionArray = {0, 0, 0, 0};

    /**
     * Input's constructor
     * 
     * @param songData
     *            of the files
     * @param studentData
     *            of students
     * @throws FileNotFoundException
     */
    public Input(String songData, String studentData)
            throws FileNotFoundException {
        songs = new SongList();
        readSongList(songData);
        people = new LList<Person>();
        
        readMusicSurveyData(studentData);
        System.out.println(songs.size());
 
        new GUIVisual(songs);
    }

    /**
     * main method that reads files
     * 
     * @param args
     *            of the files read
     * @throws FileNotFoundException
     */
    public static void main(String[] args) throws FileNotFoundException {

        if (args.length == 2) {
            new Input(args[0], args[1]);
        } 
        else {
            new Input("SongList.csv",
                    "MusicSurveyData.csv");
        }
    }

    /**
     * Reads data on the song list
     * 
     * @param fileName
     *            of song read
     * @throws FileNotFoundException
     */
    public void readSongList(String fileName) throws FileNotFoundException {
        Scanner scanner = null;
        boolean cont = true;
        try {
            scanner = new Scanner(new File(fileName));
        } 
        catch (FileNotFoundException e) {
            e.printStackTrace();
            cont = false;
        }
        scanner.nextLine().trim().split(",");
        if (cont && fileName != null) {
            String[] val;
            scanner.hasNextLine();
            while (scanner.hasNextLine()) {
                val = scanner.nextLine().trim().split(",");
                songs.add(new Song(val[0], val[1], val[2], val[3]));
            }
            scanner.close();
        }

    }

    /**
     * Reads the data on the survey
     * 
     * @param fileName
     *            of file read
     * @throws FileNotFoundException
     */
    public void readMusicSurveyData(String fileName)
            throws FileNotFoundException {
        Scanner scanner = null;
        String[] str;
        boolean cont = true;
        try {
            scanner = new Scanner(new File(fileName));
        } 
        catch (FileNotFoundException e) {
            e.printStackTrace();
            cont = false;
        }

        if (cont && fileName != null) {
            scanner.nextLine();
            while (scanner.hasNextLine()) {

                String[] val = scanner.nextLine().trim().split(",");
                if (val.length == (songs.size() * 2 + 4)) {
                    str = new String[val.length + 1];
                    for (int i = 0; i < val.length; i++) {
                        str[i] = val[i];
                    }
                    str[val.length] = "";
                } 
                else {
                    str = val;
                }

                if (str.length > 2) {
                    cont = false;
                }
                if (val.length >= 5) {
                String major = val[2];
                
                if (major.equals("Math or CMDA")) {
                    majorArray[0] += 1;
                }
                else if (major.equals("Computer Science")) {
                    majorArray[1] += 1;
                }
                else if (major.equals("Other Engineering")) {
                    majorArray[2] += 1;
                }
                else {
                    majorArray[3] += 1;
                }
                
                
                String region = val[3];
                if (region.equals("Northeast")) {
                    regionArray[0] += 1;
                }
                else if (region.equals("Southeast")) {
                    regionArray[1] += 1;
                 
                }
                else if (region.equals("United States (other than Southeast "
                                        + "or Northwest)")) {
                    regionArray[2] += 1;
                }
                else {
                    regionArray[3] += 1;
                }
                
                String hobby = val[4];
                
                if (hobby.equals("reading")) {
                    hobbyArray[0] += 1;
                }
                else if (hobby.equals("art")) {
                    hobbyArray[1] += 1;
                }
                else if (hobby.equals("sports")) {
                    hobbyArray[2] += 1;
                }
                else {
                    hobbyArray[3] += 1;
                }
                

                people.add(new Person(hobby, major, region));

                int songIdx = 0;
                for (int i = 5; i < val.length - 1; i += 2) {
                    if (val[i].equals("Yes")) {
                        
                   
                        songs.getAt(songIdx).addHeardHobby(
                                getCorrespondingIndex(hobby, "reading", "art",
                                        "sports"));
                        songs.getAt(songIdx)
                                .addHeardMajor(
                                        getCorrespondingIndex(major,
                                                "Math or CMDA",
                                                "Computer Science",
                                                "Other Engineering"));
                        songs.getAt(songIdx).addHeardRegion(
                                getCorrespondingIndex(region, "Northeast",
                                        "Southeast",
                                        "United States (other than Southeast "
                                        + "or Northwest)"));

                    } 

                    if (val[i + 1].equals("Yes")) {

                        songs.getAt(songIdx).addLikedHobby(
                                getCorrespondingIndex(hobby, "reading", "art",
                                        "sports"));
                        songs.getAt(songIdx)
                                .addLikedMajor(
                                        getCorrespondingIndex(major,
                                                "Math or CMDA",
                                                "Computer Science",
                                                "Other Engineering"));
                        songs.getAt(songIdx).addLikedRegion(
                                getCorrespondingIndex(region, "Northeast",
                                        "Southeast",
                                        "United States (other than Southeast "
                                        + "or Northwest)"));
                    }
                    songIdx++;

                }
                }
            }
        }
    }

    /**
     * Finds the corresponding index of either 
     * the hobby, major or region of the
     * person who liked that song
     * 
     * @param actual
     *            the actual value of the Song
     * @param case1
     *            the first case to be checked against
     * @param case2
     *            the second case to be checked against
     * @param case3
     *            the third case to be checked against
     * @return
     */
    private static int getCorrespondingIndex(String actual, String case1,
            String case2, String case3) {

        if (actual.equals(case1)) {
            return 0;
        } 
        else if (actual.equals(case2)) {
            return 1;
        } 
        else if (actual.equals(case3)) {
            return 2;
        } 
        else {
            return 3;
        }
    }

